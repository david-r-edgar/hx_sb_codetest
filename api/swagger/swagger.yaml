swagger: "2.0"
info:
  version: "0.0.1"
  title: Short Breaks code test
# during dev, should point to your local machine
host: localhost:10010
basePath: /
# 
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /user/{id}:
    x-swagger-router-controller: "user"
    get:
      description: "Gets the user with the specified id"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: path
          description: "id of user to return"
          required: true
          type: string
          pattern: ^[0-9a-fA-F]{24}$
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID"
        404:
          description: "User not found"
    delete:
      description: "Deletes the user with the specified id"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: path
          description: "id of user to delete"
          required: true
          type: string
          pattern: ^[0-9a-fA-F]{24}$
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/UserApiResponse"
        400:
          description: "Invalid ID"
    put:
      description: "User details will be updated for the given user id"
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
        - name: "id"
          in: path
          description: "id of user to update"
          required: true
          type: string
          pattern: ^[0-9a-fA-F]{24}$
        - name: "user"
          in: body
          description: "User object containing email, forename and surname. All these fields are optional."
          required: false
          schema:
            $ref: "#/definitions/UpdateUser"
      responses:
        200:
          description: "Success. Full user object returned in body."
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid parameter"
  /user:
    x-swagger-router-controller: user
    post:
      description: "Adds a new user"
      operationId: "addUser"
      produces:
      - "application/json"
      parameters:
        - name: "user"
          in: body
          description: "User object, in which the email, forename and surname should be set. Forename and surname should each be at least 3 characters long."
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "Success. Location returned in header; full user object returned in body."
          headers:
            Location:
              type: string
              format: url
              description: "Relative URL of the new user"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid parameter"
  /users:
    x-swagger-router-controller: user
    get:
      description: "Returns a list of users, optionally filtered by field values"
      operationId: "listUsers"
      produces:
      - "application/json"
      parameters:
        - name: "filterEmail"
          in: query
          type: string
          pattern: ^[a-z][a-zA-Z0-9_.]*(\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\.[a-z]+(\.[a-z]+)?$
          description: "Only list the user with email exactly matching"
          required: false
        - name: "filterForename"
          in: query
          type: string
          pattern: ^[a-zA-Z-\' ]*$
          description: "Only list users with forenames exactly matching"
          required: false
        - name: "filterSurname"
          in: query
          type: string
          pattern: ^[a-zA-Z-\' ]*$
          description: "Only list users with surnames exactly matching"
          required: false
      responses:
        200:
          description: "Success. List of users returned in body."
          schema:
            $ref: "#/definitions/UserList"
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        pattern: ^[0-9a-fA-F]{24}$
      email:
        type: string
        pattern: ^[a-z][a-zA-Z0-9_.]*(\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\.[a-z]+(\.[a-z]+)?$
      forename:
        type: string
        minLength: 3
        maxLength: 200
        pattern: ^[a-zA-Z-\' ]*$
      surname:
        type: string
        minLength: 3
        maxLength: 200
        pattern: ^[a-zA-Z-\' ]*$
      created:
        type: string
        format: date-time
        readOnly: true
    required: ["email", "forename", "surname"]
  UpdateUser:
    type: object
    properties:
      id:
        type: string
        readOnly: true
        pattern: ^[0-9a-fA-F]{24}$
      email:
        type: string
        pattern: ^[a-z][a-zA-Z0-9_.]*(\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\.[a-z]+(\.[a-z]+)?$
      forename:
        type: string
        minLength: 3
        maxLength: 200
        pattern: ^[a-zA-Z-\' ]*$
      surname:
        type: string
        minLength: 3
        maxLength: 200
        pattern: ^[a-zA-Z-\' ]*$
      created:
        type: string
        format: date-time
        readOnly: true
  UserList:
    type: array
    items:
      $ref: '#/definitions/User'
  UserApiResponse:
    type: object
    properties:
      message:
        type: string

